// Mocks generated by Mockito 5.0.10 from annotations
// in rest/test/snapshot_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:flutter_driver/src/common/find.dart' as _i11;
import 'package:flutter_driver/src/common/health.dart' as _i4;
import 'package:flutter_driver/src/common/layer_tree.dart' as _i6;
import 'package:flutter_driver/src/common/message.dart' as _i10;
import 'package:flutter_driver/src/common/render_tree.dart' as _i5;
import 'package:flutter_driver/src/common/wait.dart' as _i12;
import 'package:flutter_driver/src/driver/driver.dart' as _i7;
import 'package:flutter_driver/src/driver/timeline.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vm_service/src/vm_service.dart' as _i2;
import 'package:webdriver/src/async/web_driver.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeIsolate extends _i1.Fake implements _i2.Isolate {
  @override
  String toString() => super.toString();
}

class _FakeVmService extends _i1.Fake implements _i2.VmService {}

class _FakeWebDriver extends _i1.Fake implements _i3.WebDriver {
  @override
  String toString() => super.toString();
}

class _FakeHealth extends _i1.Fake implements _i4.Health {}

class _FakeRenderTree extends _i1.Fake implements _i5.RenderTree {}

class _FakeLayerTree extends _i1.Fake implements _i6.LayerTree {}

class _FakeDriverOffset extends _i1.Fake implements _i7.DriverOffset {
  @override
  String toString() => super.toString();
}

class _FakeTimeline extends _i1.Fake implements _i8.Timeline {}

/// A class which mocks [FlutterDriver].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterDriver extends _i1.Mock implements _i7.FlutterDriver {
  MockFlutterDriver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isolate get appIsolate =>
      (super.noSuchMethod(Invocation.getter(#appIsolate),
          returnValue: _FakeIsolate()) as _i2.Isolate);
  @override
  _i2.VmService get serviceClient =>
      (super.noSuchMethod(Invocation.getter(#serviceClient),
          returnValue: _FakeVmService()) as _i2.VmService);
  @override
  _i3.WebDriver get webDriver =>
      (super.noSuchMethod(Invocation.getter(#webDriver),
          returnValue: _FakeWebDriver()) as _i3.WebDriver);
  @override
  _i9.Future<void> enableAccessibility() =>
      (super.noSuchMethod(Invocation.method(#enableAccessibility, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<Map<String, dynamic>> sendCommand(_i10.Command? command) =>
      (super.noSuchMethod(Invocation.method(#sendCommand, [command]),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i9.Future<Map<String, dynamic>>);
  @override
  _i9.Future<_i4.Health> checkHealth({Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#checkHealth, [], {#timeout: timeout}),
              returnValue: Future<_i4.Health>.value(_FakeHealth()))
          as _i9.Future<_i4.Health>);
  @override
  _i9.Future<_i5.RenderTree> getRenderTree({Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getRenderTree, [], {#timeout: timeout}),
              returnValue: Future<_i5.RenderTree>.value(_FakeRenderTree()))
          as _i9.Future<_i5.RenderTree>);
  @override
  _i9.Future<_i6.LayerTree> getLayerTree({Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getLayerTree, [], {#timeout: timeout}),
              returnValue: Future<_i6.LayerTree>.value(_FakeLayerTree()))
          as _i9.Future<_i6.LayerTree>);
  @override
  _i9.Future<void> tap(_i11.SerializableFinder? finder, {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#tap, [finder], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitFor(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#waitFor, [finder], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitForAbsent(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#waitForAbsent, [finder], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitForCondition(
          _i12.SerializableWaitCondition? waitCondition,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(
              #waitForCondition, [waitCondition], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitUntilNoTransientCallbacks({Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(
              #waitUntilNoTransientCallbacks, [], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitUntilFirstFrameRasterized() =>
      (super.noSuchMethod(Invocation.method(#waitUntilFirstFrameRasterized, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.DriverOffset> getTopLeft(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getTopLeft, [finder], {#timeout: timeout}),
              returnValue: Future<_i7.DriverOffset>.value(_FakeDriverOffset()))
          as _i9.Future<_i7.DriverOffset>);
  @override
  _i9.Future<_i7.DriverOffset> getTopRight(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getTopRight, [finder], {#timeout: timeout}),
              returnValue: Future<_i7.DriverOffset>.value(_FakeDriverOffset()))
          as _i9.Future<_i7.DriverOffset>);
  @override
  _i9.Future<_i7.DriverOffset> getBottomLeft(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getBottomLeft, [finder], {#timeout: timeout}),
              returnValue: Future<_i7.DriverOffset>.value(_FakeDriverOffset()))
          as _i9.Future<_i7.DriverOffset>);
  @override
  _i9.Future<_i7.DriverOffset> getBottomRight(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getBottomRight, [finder], {#timeout: timeout}),
              returnValue: Future<_i7.DriverOffset>.value(_FakeDriverOffset()))
          as _i9.Future<_i7.DriverOffset>);
  @override
  _i9.Future<_i7.DriverOffset> getCenter(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getCenter, [finder], {#timeout: timeout}),
              returnValue: Future<_i7.DriverOffset>.value(_FakeDriverOffset()))
          as _i9.Future<_i7.DriverOffset>);
  @override
  _i9.Future<Map<String, Object?>> getRenderObjectDiagnostics(
          _i11.SerializableFinder? finder,
          {int? subtreeDepth = 0,
          bool? includeProperties = true,
          Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getRenderObjectDiagnostics, [
                finder
              ], {
                #subtreeDepth: subtreeDepth,
                #includeProperties: includeProperties,
                #timeout: timeout
              }),
              returnValue:
                  Future<Map<String, Object?>>.value(<String, Object?>{}))
          as _i9.Future<Map<String, Object?>>);
  @override
  _i9.Future<Map<String, Object?>> getWidgetDiagnostics(
          _i11.SerializableFinder? finder,
          {int? subtreeDepth = 0,
          bool? includeProperties = true,
          Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#getWidgetDiagnostics, [
                finder
              ], {
                #subtreeDepth: subtreeDepth,
                #includeProperties: includeProperties,
                #timeout: timeout
              }),
              returnValue:
                  Future<Map<String, Object?>>.value(<String, Object?>{}))
          as _i9.Future<Map<String, Object?>>);
  @override
  _i9.Future<void> scroll(_i11.SerializableFinder? finder, double? dx,
          double? dy, Duration? duration,
          {int? frequency = 60, Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#scroll, [finder, dx, dy, duration],
              {#frequency: frequency, #timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> scrollIntoView(_i11.SerializableFinder? finder,
          {double? alignment = 0.0, Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#scrollIntoView, [finder],
              {#alignment: alignment, #timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> scrollUntilVisible(
          _i11.SerializableFinder? scrollable, _i11.SerializableFinder? item,
          {double? alignment = 0.0,
          double? dxScroll = 0.0,
          double? dyScroll = 0.0,
          Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#scrollUntilVisible, [
            scrollable,
            item
          ], {
            #alignment: alignment,
            #dxScroll: dxScroll,
            #dyScroll: dyScroll,
            #timeout: timeout
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getText(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#getText, [finder], {#timeout: timeout}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<void> enterText(String? text, {Duration? timeout}) => (super
      .noSuchMethod(Invocation.method(#enterText, [text], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setTextEntryEmulation({bool? enabled, Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#setTextEntryEmulation, [],
              {#enabled: enabled, #timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> requestData(String? message, {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#requestData, [message], {#timeout: timeout}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<bool> setSemantics(bool? enabled, {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#setSemantics, [enabled], {#timeout: timeout}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<int> getSemanticsId(_i11.SerializableFinder? finder,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#getSemanticsId, [finder], {#timeout: timeout}),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<List<int>> screenshot() => (super.noSuchMethod(
      Invocation.method(#screenshot, []),
      returnValue: Future<List<int>>.value(<int>[])) as _i9.Future<List<int>>);
  @override
  _i9.Future<List<Map<String, dynamic>>> getVmFlags() => (super.noSuchMethod(
      Invocation.method(#getVmFlags, []),
      returnValue: Future<List<Map<String, dynamic>>>.value(
          <Map<String, dynamic>>[])) as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<void> startTracing(
          {List<_i7.TimelineStream>? streams = const [_i7.TimelineStream.all],
          Duration? timeout = const Duration(seconds: 5)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #startTracing, [], {#streams: streams, #timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i8.Timeline> stopTracingAndDownloadTimeline(
          {Duration? timeout = const Duration(seconds: 5)}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #stopTracingAndDownloadTimeline, [], {#timeout: timeout}),
              returnValue: Future<_i8.Timeline>.value(_FakeTimeline()))
          as _i9.Future<_i8.Timeline>);
  @override
  _i9.Future<_i8.Timeline> traceAction(_i9.Future<dynamic> Function()? action,
          {List<_i7.TimelineStream>? streams = const [_i7.TimelineStream.all],
          bool? retainPriorEvents = false}) =>
      (super.noSuchMethod(
              Invocation.method(#traceAction, [action],
                  {#streams: streams, #retainPriorEvents: retainPriorEvents}),
              returnValue: Future<_i8.Timeline>.value(_FakeTimeline()))
          as _i9.Future<_i8.Timeline>);
  @override
  _i9.Future<void> clearTimeline(
          {Duration? timeout = const Duration(seconds: 5)}) =>
      (super.noSuchMethod(
          Invocation.method(#clearTimeline, [], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<T> runUnsynchronized<T>(_i9.Future<T> Function()? action,
          {Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#runUnsynchronized, [action], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  _i9.Future<void> forceGC() =>
      (super.noSuchMethod(Invocation.method(#forceGC, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i9.Future<void>);
}
